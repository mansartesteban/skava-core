{"version":3,"file":"Shapes.es.js","sources":["../../src/Engine/Shapes/Circle.js","../../src/Engine/Shapes/CircleScreen.js","../../src/Engine/Shapes/DebugVector.js","../../src/Engine/Shapes/Line.js","../../src/Engine/Shapes/MultiLine.js","../../src/Engine/Shapes/Path.js","../../src/Engine/Shapes/Sprite.js","../../src/Engine/Shapes/SpriteSequence.js","../../src/Engine/Shapes/Square.js"],"sourcesContent":["import { RGB, Rotation, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass Circle {\r\n  #position;\r\n  #radius;\r\n  #color;\r\n  #angle;\r\n  #direction;\r\n  #options;\r\n\r\n  constructor(\r\n    position = new Vector2(),\r\n    radius = 1,\r\n    color = new RGB(),\r\n    angle = null,\r\n    direction = null,\r\n    options = {}\r\n  ) {\r\n    this.#position = position;\r\n    this.#radius = radius;\r\n    this.#color = color;\r\n    this.angle = angle;\r\n    this.direction = direction;\r\n    this.#options = options;\r\n  }\r\n\r\n  get position() {\r\n    return this.#position;\r\n  }\r\n\r\n  get radius() {\r\n    return this.#radius;\r\n  }\r\n\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n\r\n  get angle() {\r\n    return this.#angle;\r\n  }\r\n\r\n  get direction() {\r\n    return this.#direction;\r\n  }\r\n  get options() {\r\n    return this.#options;\r\n  }\r\n\r\n  set position(position) {\r\n    this.#position = position;\r\n  }\r\n  set radius(radius) {\r\n    this.#radius = radius;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n  set angle(angle) {\r\n    if (!angle) {\r\n      angle = new Rotation(Math.PI * 2, true);\r\n    }\r\n    this.#angle = angle;\r\n  }\r\n  set direction(direction) {\r\n    if (!direction) {\r\n      direction = new Vector2();\r\n    }\r\n    this.#direction = direction;\r\n  }\r\n  set options(options) {\r\n    this.#options = options;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      ctx.fillStyle = this.#color._toString;\r\n\r\n      if (this.#options.shadowBlur) {\r\n        ctx.shadowBlur = this.#options.shadowBlur;\r\n      }\r\n      if (this.#options.shadowColor) {\r\n        ctx.shadowColor = this.#options.shadowColor._toString;\r\n      }\r\n\r\n      ctx.arc(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.#radius,\r\n        this.#direction.rotation.angle - this.#angle.angle / 2,\r\n        this.#direction.rotation.angle + this.#angle.angle / 2\r\n      );\r\n      if (this.#angle.angle % (2 * Math.PI) !== 0) {\r\n        ctx.lineTo(this.position.x, this.position.y);\r\n      }\r\n\r\n      ctx.fill();\r\n\r\n      if (this.#options.shadowBlur) {\r\n        ctx.shadowBlur = 0;\r\n      }\r\n      if (this.#options.shadowColor) {\r\n        ctx.shadowColor = \"\";\r\n      }\r\n\r\n      return [\"fillStyle\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default Circle;\r\n","import { Rotation, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass CircleScreen {\r\n  #position;\r\n  #radius;\r\n  #color;\r\n  #angle;\r\n  #direction;\r\n\r\n  constructor(\r\n    position = new Vector2(),\r\n    radius = 1,\r\n    color = new this.#color(),\r\n    angle = new Rotation(Math.PI * 2, true),\r\n    direction = new Vector2()\r\n  ) {\r\n    this.#position = position;\r\n    this.#radius = radius;\r\n    this.#color = color;\r\n    this.#angle = angle;\r\n    this.#direction = direction;\r\n  }\r\n\r\n  get position() {\r\n    return this.#position;\r\n  }\r\n\r\n  get radius() {\r\n    return this.#radius;\r\n  }\r\n\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n\r\n  get angle() {\r\n    return this.#angle;\r\n  }\r\n\r\n  get direction() {\r\n    return this.#direction;\r\n  }\r\n\r\n  set position(position) {\r\n    this.#position = position;\r\n  }\r\n  set radius(radius) {\r\n    this.#radius = radius;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n  set angle(angle) {\r\n    this.#angle = angle;\r\n  }\r\n  set direction(direction) {\r\n    this.#direction = direction;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      ctx.fillStyle = this.#color._toString;\r\n\r\n      let positionOnScreen = this.#position;\r\n\r\n      ctx.arc(\r\n        positionOnScreen.x,\r\n        positionOnScreen.y,\r\n        this.#radius,\r\n        this.#direction.rotation.angle - this.#angle.angle / 2,\r\n        this.#direction.rotation.angle + this.#angle.angle / 2\r\n      );\r\n      if (this.#angle.angle % (2 * Math.PI) !== 0) {\r\n        ctx.lineTo(positionOnScreen.x, positionOnScreen.y);\r\n      }\r\n\r\n      ctx.fill();\r\n      return [\"fillStyle\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default CircleScreen;\r\n","import { RGB, Rotation, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\nimport { clamp } from \"@/Bundles/Utils/Numeric\";\r\n\r\nclass DebugVector {\r\n  #from;\r\n  #to;\r\n  #color;\r\n  #thickness;\r\n\r\n  #frame = 0;\r\n\r\n  constructor(\r\n    from = new Vector2(),\r\n    to = new Vector2(),\r\n    color = RGB.Fuchsia,\r\n    thickness = 5\r\n  ) {\r\n    this.#from = from;\r\n    this.#to = to;\r\n    this.#color = color;\r\n    this.#thickness = thickness;\r\n  }\r\n\r\n  get from() {\r\n    return this.#from;\r\n  }\r\n  get to() {\r\n    return this.#to;\r\n  }\r\n\r\n  set from(from) {\r\n    this.#from = from;\r\n  }\r\n  set to(to) {\r\n    this.#to = to;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      ctx.strokeStyle = this.#color._toString;\r\n      ctx.lineWidth = this.#thickness;\r\n      ctx.fillStyle = this.#color._toString;\r\n\r\n      let arrowSize = clamp(this.#thickness * 3, 10, 1000);\r\n      if (Vector2.from(this.from).to(this.to).length <= arrowSize) {\r\n        let color = this.#frame % 4 < 2 ? \"#ff0000\" : \"#ffffff\";\r\n        ctx.strokeStyle = color;\r\n        ctx.fillStyle = color;\r\n      }\r\n\r\n      this.to.add(\r\n        Vector2.from(this.from).to(this.to).normalized.multiply(-arrowSize)\r\n      );\r\n      let front = this.to\r\n        .clone()\r\n        .add(\r\n          Vector2.from(this.from).to(this.to).normalized.multiply(arrowSize)\r\n        );\r\n      let frontDirection = Vector2.from(this.to).to(this.from).normalize();\r\n      let arrowSides = arrowSize * 2;\r\n\r\n      let left = frontDirection\r\n        .clone()\r\n        .rotate(new Rotation(Math.PI * 2))\r\n        .multiply(arrowSides)\r\n        .add(this.to);\r\n      let right = frontDirection\r\n        .clone()\r\n        .rotate(new Rotation(-Math.PI * 2))\r\n        .multiply(arrowSides)\r\n        .add(this.to);\r\n\r\n      ctx.moveTo(this.from.x, this.from.y);\r\n      ctx.lineTo(this.to.x, this.to.y);\r\n      ctx.stroke();\r\n\r\n      ctx.moveTo(front.x, front.y);\r\n      ctx.lineTo(left.x, left.y);\r\n      ctx.lineTo(right.x, right.y);\r\n      ctx.lineTo(front.x, front.y);\r\n      ctx.fill();\r\n\r\n      return [\"strokeStyle\", \"lineWidth\", \"fillStyle\"];\r\n    });\r\n    this.#frame++;\r\n  }\r\n}\r\n\r\nexport default DebugVector;\r\n","import { RGB, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass Line {\r\n  #from;\r\n  #to;\r\n  #color;\r\n  #dashes;\r\n  #thickness;\r\n\r\n  #options;\r\n\r\n  constructor(\r\n    from = new Vector2(),\r\n    to = new Vector2(),\r\n    color = new RGB(),\r\n    thickness = 1,\r\n    dashes = [],\r\n    options = {}\r\n  ) {\r\n    this.#from = from;\r\n    this.#to = to;\r\n    this.#color = color;\r\n    this.#dashes = dashes;\r\n    this.#thickness = thickness;\r\n    this.#options = options;\r\n  }\r\n\r\n  get from() {\r\n    return this.#from;\r\n  }\r\n  get to() {\r\n    return this.#to;\r\n  }\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n  get dashes() {\r\n    return this.#dashes;\r\n  }\r\n  get thickness() {\r\n    return this.#thickness;\r\n  }\r\n  get options() {\r\n    return this.#options;\r\n  }\r\n\r\n  set from(from) {\r\n    this.#from = from;\r\n  }\r\n  set to(to) {\r\n    this.#to = to;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n  set dashes(dashes) {\r\n    this.#dashes = dashes;\r\n  }\r\n  set thickness(thickness) {\r\n    this.#thickness = thickness;\r\n  }\r\n  set options(options) {\r\n    this.#options = options;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      const dashes = this.#dashes.map((dash) =>\r\n        typeof dash === \"string\" ? parseInt(dash) : dash\r\n      );\r\n\r\n      if (this.#options.shadowBlur) {\r\n        ctx.shadowBlur = this.#options.shadowBlur;\r\n      }\r\n      if (this.#options.shadowColor) {\r\n        ctx.shadowColor = this.#options.shadowColor._toString;\r\n      }\r\n\r\n      ctx.lineCap = \"round\";\r\n      ctx.setLineDash(dashes);\r\n      ctx.strokeStyle = this.color._toString;\r\n      ctx.lineWidth = this.thickness;\r\n\r\n      ctx.moveTo(this.from.x, this.from.y);\r\n      ctx.lineTo(this.to.x, this.to.y);\r\n      ctx.stroke();\r\n\r\n      if (this.#options.shadowBlur) {\r\n        ctx.shadowBlur = 0;\r\n      }\r\n      if (this.#options.shadowColor) {\r\n        ctx.shadowColor = \"\";\r\n      }\r\n\r\n      return [\"strokeStyle\", \"setLineDash\", \"lineWidth\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default Line;\r\n","import { RGB } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass MultiLine {\r\n  #points;\r\n  #color;\r\n  #dashes;\r\n  #thickness;\r\n\r\n  constructor(points = [], color = new RGB(), thickness = 1, dashes = []) {\r\n    this.#points = points;\r\n    this.#color = color;\r\n    this.#dashes = dashes;\r\n    this.#thickness = thickness;\r\n  }\r\n\r\n  get points() {\r\n    return this.#points;\r\n  }\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n  get dashes() {\r\n    return this.#dashes;\r\n  }\r\n  get thickness() {\r\n    return this.#thickness;\r\n  }\r\n\r\n  set points(points) {\r\n    this.#points = points;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n  set dashes(dashes) {\r\n    this.#dashes = dashes;\r\n  }\r\n  set thickness(thickness) {\r\n    this.#thickness = thickness;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      const dashes = this.#dashes.map((dash) =>\r\n        typeof dash === \"string\" ? parseInt(dash) : dash\r\n      );\r\n      ctx.lineCap = \"round\";\r\n      ctx.setLineDash(dashes);\r\n      ctx.strokeStyle = this.color._toString;\r\n      ctx.lineWidth = this.thickness;\r\n\r\n      for (let i = 0; i < this.points.length - 1; i++) {\r\n        ctx.moveTo(this.points[i].x, this.points[i].y);\r\n        ctx.lineTo(this.points[i + 1].x, this.points[i + 1].y);\r\n      }\r\n      ctx.moveTo(\r\n        this.points[this.points.length - 1].x,\r\n        this.points[this.points.length - 1].y\r\n      );\r\n      ctx.stroke();\r\n\r\n      return [\"strokeStyle\", \"setLineDash\", \"lineWidth\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default MultiLine;\r\n","class Path {\r\n  checkpoints = [];\r\n\r\n  save() {}\r\n\r\n  back(count) {}\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n  }\r\n}\r\n\r\nexport default Path;\r\n","import { TransformComponent } from \"@/Bundles/Core/Components\";\r\nimport { Rotation, Vector2 } from \"@/Bundles/Core\";\r\nimport { Img } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass Sprite extends Img {\r\n  #columns;\r\n  #rows;\r\n  #count;\r\n  #scale;\r\n  offsetRotation;\r\n\r\n  #current;\r\n\r\n  constructor(path, options = {}) {\r\n    super(path);\r\n    this.#columns = options.columns || 1;\r\n    this.#rows = options.rows || 1;\r\n    this.#count = this.#rows * this.#columns || 1;\r\n    this.#scale = options.scale || 1;\r\n    this.offsetRotation = options.offsetRotation || new Rotation();\r\n    this.#current = 0;\r\n  }\r\n\r\n  get current() {\r\n    return this.#current;\r\n  }\r\n\r\n  set current(position) {\r\n    this.#current = position;\r\n  }\r\n\r\n  next(steps = 1) {\r\n    this.#current += steps;\r\n    if (this.#current > this.#count - 1) {\r\n      this.#current = 0;\r\n    }\r\n  }\r\n\r\n  prev(steps = 1) {\r\n    this.#current -= steps;\r\n    if (this.#current < 0) {\r\n      this.#current = this.#count - 1;\r\n    }\r\n  }\r\n\r\n  draw(viewer, transform = new TransformComponent()) {\r\n    let ctx = viewer.ctx;\r\n    let position = transform.position;\r\n    let rotation = transform.rotation;\r\n\r\n    if (this.imgLoaded) {\r\n      let current = new Vector2(\r\n        this.#current % this.#columns,\r\n        Math.floor(this.#current / this.#columns)\r\n      );\r\n\r\n      let spriteWidth = this.img.width / this.#columns;\r\n      let spriteHeight = this.img.height / this.#rows;\r\n      let displayedWidth = spriteWidth * this.#scale;\r\n      let displayedHeight = spriteHeight * this.#scale;\r\n\r\n      ctx.save();\r\n      ctx.translate(position.x, position.y);\r\n      ctx.rotate(-rotation.sub(this.offsetRotation).angle);\r\n      ctx.translate(-position.x, -position.y);\r\n      ctx.imageSmoothingEnabled = false;\r\n      ctx.drawImage(\r\n        this.img,\r\n        current.x * spriteWidth,\r\n        current.y * spriteHeight,\r\n        spriteWidth,\r\n        spriteHeight,\r\n        position.x - displayedWidth / 2,\r\n        position.y - displayedHeight / 2,\r\n        displayedWidth,\r\n        displayedHeight\r\n      );\r\n      ctx.restore();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Sprite;\r\n","\r\nclass SpriteSequence {\r\n  sprite;\r\n  positions;\r\n\r\n  #current;\r\n\r\n  constructor(sprite, positions) {\r\n    this.sprite = sprite;\r\n    this.positions = positions;\r\n    this.#current = 0;\r\n    this.sprite.current = this.positions[this.current];\r\n  }\r\n\r\n  get current() {\r\n    return this.#current;\r\n  }\r\n\r\n  set current(current) {\r\n    this.#current = current;\r\n    this.sprite.current = this.positions[this.current];\r\n  }\r\n\r\n  next() {\r\n    this.current++;\r\n    if (this.current >= this.positions.length) {\r\n      this.current = 0;\r\n    }\r\n  }\r\n\r\n  prev() {\r\n    this.current--;\r\n    if (this.current < 0) {\r\n      this.current = this.positions.length - 1;\r\n    }\r\n  }\r\n\r\n  draw(viewer, transform) {\r\n    this.sprite.draw(viewer, transform);\r\n  }\r\n}\r\n\r\nexport default SpriteSequence;\r\n","import { RGB, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass Square {\r\n  #position;\r\n  #size;\r\n  #color;\r\n\r\n  constructor(\r\n    position = new Vector2(),\r\n    size = new Vector2(),\r\n    color = new RGB()\r\n  ) {\r\n    this.#position = position;\r\n    this.#size = size;\r\n    this.#color = color;\r\n  }\r\n\r\n  get position() {\r\n    return this.#position;\r\n  }\r\n\r\n  get size() {\r\n    return this.#size;\r\n  }\r\n\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n\r\n  set position(position) {\r\n    this.#position = position;\r\n  }\r\n  set size(size) {\r\n    this.#size = size;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      ctx.fillStyle = this.#color._toString;\r\n\r\n      ctx.fillRect(this.position.x, this.position.y, this.size.x, this.size.y);\r\n      ctx.fill();\r\n      return [\"fillStyle\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default Square;\r\n"],"names":["_color","_position","_radius","_angle","_direction","_from","_to","_thickness","_options","_dashes","_current"],"mappings":"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"}