{"version":3,"file":"Text-DxuZZ4pu.js","sources":["../src/Engine/Shapes/Draw.js","../src/Engine/Shapes/Img.js","../src/Engine/Shapes/RoundSquare.js","../src/Engine/Shapes/Text.js"],"sourcesContent":["import { RGB, Vector2 } from \"@/Bundles/Core\";\r\n\r\nconst defaultsAttributes = {\r\n  strokeStyle: \"#000\",\r\n  lineWidth: \"1\",\r\n  fillStyle: \"#000\",\r\n};\r\nconst defaultsMethods = {\r\n  setLineDash: [],\r\n};\r\n\r\nclass Draw {\r\n  static draw(viewer, callback) {\r\n    let ctx = viewer.ctx;\r\n    ctx.beginPath();\r\n    let toReset = callback();\r\n    ctx.closePath();\r\n\r\n    if (toReset) {\r\n      Draw.reset(ctx, toReset);\r\n    }\r\n  }\r\n\r\n  static strokeRect(ctx, x, y, w, h, c = RGB.Green) {\r\n    let p = new Vector2(x, y);\r\n    let thickness = 1;\r\n    ctx.fillStyle = c._toString || \"#ff0000\";\r\n    ctx.fillRect(p.x, p.y, w, h);\r\n    ctx.fillStyle = \"#000000\";\r\n    ctx.fillRect(\r\n      p.x + thickness,\r\n      p.y + thickness,\r\n      w - thickness * 2,\r\n      h - thickness * 2\r\n    );\r\n  }\r\n\r\n  static reset(ctx, properties = []) {\r\n    if (properties.length === 0) {\r\n      properties = Object.keys(defaultsAttributes).concat(\r\n        Object.keys(defaultsMethods)\r\n      );\r\n    }\r\n\r\n    properties.forEach((property) => {\r\n      if (Object.keys(defaultsAttributes).indexOf(property) !== -1) {\r\n        switch (property) {\r\n          case \"fillStyle\":\r\n            ctx.fillStyle = defaultsAttributes.fillStyle;\r\n            break;\r\n          case \"lineWidth\":\r\n            ctx.lineWidth = defaultsAttributes.lineWidth;\r\n            break;\r\n          case \"strokeStyle\":\r\n            ctx.strokeStyle = defaultsAttributes.strokeStyle;\r\n            break;\r\n        }\r\n      } else if (Object.keys(defaultsMethods).indexOf(property) !== -1) {\r\n        switch (property) {\r\n          case \"setLineDash\":\r\n            ctx.setLineDash(defaultsMethods.setLineDash);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n}\r\nexport default Draw;\r\n","import { RGB } from \"@/Bundles/Core\";\r\nimport { TransformComponent } from \"@/Bundles/Core/Components\";\r\n\r\nclass Img {\r\n  #path;\r\n  img;\r\n  imgLoaded;\r\n\r\n  constructor(path) {\r\n    this.#path = path;\r\n    this.img = new Image();\r\n    this.imgLoaded = false;\r\n\r\n    this.#loadImage();\r\n  }\r\n\r\n  #loadImage() {\r\n    this.img.onload = () => {\r\n      this.imgLoaded = true;\r\n    };\r\n    this.img.src = this.#path;\r\n  }\r\n\r\n  draw(viewer, transform = new TransformComponent()) {\r\n    let ctx = viewer.ctx;\r\n    let position = transform.position;\r\n    let scale = transform.scale;\r\n    let size = transform.size;\r\n    let rotation = transform.rotation;\r\n    if (this.imgLoaded) {\r\n      ctx.save();\r\n      ctx.translate(position.x, position.y);\r\n      ctx.rotate(-rotation.angle);\r\n      ctx.translate(-position.x, -position.y);\r\n      ctx.shadowOffsetX = 3;\r\n      ctx.shadowOffsetY = 2;\r\n      ctx.shadowColor = new RGB(0, 0, 0, 0.25)._toString;\r\n      ctx.shadowBlur = 4;\r\n      // ctx.drawImage(\r\n      //   this.img,\r\n      //   position.x,\r\n      //   position.y,\r\n      //   size.x,\r\n      //   size.y,\r\n      //   position.x - (size.x * scale.x) / 2,\r\n      //   position.y - (size.y * scale.y) / 2,\r\n      //   this.img.width * scale.x,\r\n      //   this.img.height * scale.y\r\n      // );\r\n      ctx.drawImage(this.img, position.x, position.y, size.x, size.y);\r\n      ctx.restore();\r\n    }\r\n  }\r\n}\r\n\r\nexport default Img;\r\n","import { RGB, Rotation, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass RoundSquare {\r\n  #position;\r\n  #size;\r\n  #radius;\r\n  #rotation;\r\n  #color;\r\n  #shadowBlur;\r\n  #shadowColor;\r\n  #shadowSize;\r\n  #shadowPosition;\r\n\r\n  constructor(\r\n    position = new Vector2(),\r\n    size = new Vector2(),\r\n    radius = [0],\r\n    color = new RGB(),\r\n    rotation = new Rotation()\r\n  ) {\r\n    this.#position = position;\r\n    this.#size = size;\r\n    this.#radius = radius;\r\n    this.#rotation = rotation;\r\n    this.#color = color;\r\n  }\r\n\r\n  get position() {\r\n    return this.#position;\r\n  }\r\n\r\n  get size() {\r\n    return this.#size;\r\n  }\r\n\r\n  get radius() {\r\n    return this.#radius;\r\n  }\r\n\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n\r\n  get rotation() {\r\n    return this.#rotation;\r\n  }\r\n\r\n  get shadowBlur() {\r\n    return this.#shadowBlur;\r\n  }\r\n  get shadowColor() {\r\n    return this.#shadowColor;\r\n  }\r\n  get shadowSize() {\r\n    return this.#shadowSize;\r\n  }\r\n  get shadowPosition() {\r\n    return this.#shadowPosition;\r\n  }\r\n\r\n  set position(position) {\r\n    this.#position = position;\r\n  }\r\n  set size(size) {\r\n    this.#size = size;\r\n  }\r\n  set radius(radius) {\r\n    this.#radius = radius;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n  set rotation(rotation) {\r\n    this.#rotation = rotation;\r\n  }\r\n  set shadowBlur(shadowBlur) {\r\n    this.#shadowBlur = shadowBlur;\r\n  }\r\n  set shadowColor(shadowColor) {\r\n    this.#shadowColor = shadowColor;\r\n  }\r\n  set shadowSize(shadowSize) {\r\n    this.#shadowSize = shadowSize;\r\n  }\r\n  set shadowPosition(shadowPosition) {\r\n    this.#shadowPosition = shadowPosition;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      ctx.fillStyle = this.#color._toString;\r\n\r\n      ctx.save();\r\n      ctx.translate(\r\n        this.position.x + this.size.x / 2,\r\n        this.position.y + this.size.y / 2\r\n      );\r\n      ctx.rotate(-this.rotation.angle);\r\n      ctx.translate(\r\n        -this.position.x - this.size.x / 2,\r\n        -this.position.y - this.size.y / 2\r\n      );\r\n      ctx.imageSmoothingEnabled = false;\r\n      if (this.shadowBlur) {\r\n        ctx.shadowBlur = this.shadowBlur;\r\n      }\r\n      if (this.shadowColor) {\r\n        ctx.shadowColor = this.shadowColor._toString;\r\n      }\r\n      ctx.roundRect(\r\n        this.position.x,\r\n        this.position.y,\r\n        this.size.x,\r\n        this.size.y,\r\n        this.radius\r\n      );\r\n      ctx.fill();\r\n      ctx.restore();\r\n      if (this.shadowBlur) {\r\n        ctx.shadowBlur = 0;\r\n      }\r\n      if (this.shadowColor) {\r\n        ctx.shadowColor = \"\";\r\n      }\r\n\r\n      return [\"fillStyle\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default RoundSquare;\r\n","import { RGB, Vector2 } from \"@/Bundles/Core\";\r\nimport { Draw } from \"@/Bundles/Core/Shapes\";\r\n\r\nclass Text {\r\n  #text;\r\n  #position;\r\n  #color;\r\n  #fontSize;\r\n\r\n  constructor(\r\n    text = \"\",\r\n    position = new Vector2(),\r\n    color = RGB.White,\r\n    fontSize = 10\r\n  ) {\r\n    this.#text = text;\r\n    this.#position = position;\r\n    this.#color = color;\r\n    this.#fontSize = fontSize;\r\n  }\r\n\r\n  get text() {\r\n    return this.#text;\r\n  }\r\n  get position() {\r\n    return this.#position;\r\n  }\r\n  get color() {\r\n    return this.#color;\r\n  }\r\n  get fontSize() {\r\n    return this.#fontSize;\r\n  }\r\n\r\n  set text(text) {\r\n    this.#text = text;\r\n  }\r\n  set position(position) {\r\n    this.#position = position;\r\n  }\r\n  set color(color) {\r\n    this.#color = color;\r\n  }\r\n  set fontSize(fontSize) {\r\n    this.#fontSize = fontSize;\r\n  }\r\n\r\n  draw(viewer) {\r\n    let ctx = viewer.ctx;\r\n    Draw.draw(viewer, () => {\r\n      ctx.font = `${this.fontSize}pt BraahOne`;\r\n      ctx.textAlign = \"center\";\r\n      ctx.textBaseline = \"center\";\r\n\r\n      ctx.fillStyle = this.color._toString;\r\n      ctx.fillText(\r\n        this.text.toString(),\r\n        this.position.x,\r\n        this.position.y + this.fontSize / 3\r\n      );\r\n\r\n      return [\"fillStyle\"];\r\n    });\r\n  }\r\n}\r\n\r\nexport default Text;\r\n\r\n/*\r\nTODO\r\n- Centrer le text sur la position\r\n- Appliquer des styles diff√©rents\r\n*/\r\n"],"names":["RGB","Vector2","TransformComponent","Rotation","_position","_color"],"mappings":"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"}